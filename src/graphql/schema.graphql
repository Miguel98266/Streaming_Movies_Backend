type Query{
 ping: String
 getMovies:[Movie]
 getMovieById(_id:ID):Movie
 getRateByMovie(_id:ID):[RateSpecial]
 login(email:String,password:String):Login
 getRateAvgByMovie(_id:ID):Float
}
type Mutation{
    createMovie(input:MovieInput):Movie
    updateMovie(input:MovieInput, _id:ID):Movie
    removeMovie(_id:ID):[Movie]
    createUser(input:UserInput):User
    updateUser(input:UserInputUpdate, _id:ID):User
    createRate(input:RateInput, _id:ID):Movie
}
type Movie{
    _id:ID
    title:String,
    description:String,
    image:String,
    dateRelease:String,
    rate:[RateSpecial]
}
input MovieInput{
    title:String,
    description:String,
    image:String,
    dateRelease:String
}
type Rate{
    _id:ID,
    user:ID,
    description:String,
    rate:Int
}
type RateSpecial{
    _id:ID,
    user:User,
    description:String,
    rate:Int
}
input RateInput{
    user:ID!,
    description:String,
    rate:Int!
}

type User{
    _id:ID,
    name:String,
    lastName:String,
    birthday:String,
    email:String,
}
input UserInput{
    name:String!,
    lastName:String,
    birthday:String,
    email:String!,
    password:String!
}
input UserInputUpdate{
    name:String!,
    lastName:String,
    birthday:String,
    email:String!,
}
type Login{
    isValid:Boolean,
    msg:String,
    token:String
}